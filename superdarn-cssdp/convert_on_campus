#!/bin/bash
# Copyright 2021 SuperDARN Canada, University of Saskatchewan
# Author: Marci Detwiller
#
# Last Edited: October 2022 by Theo Kolkman
# Refactored for inotify usage
#
# A script that uses pydarnio to convert Borealis rawacf files to SuperDARN DMap files. Uses the
# borealis_array_to_dmap.py script to convert already-restructured array files to dmap. 
# 
# This script is executed for all sites, but only performs conversions for sites specified in the
# SITES array. Only sites that have bandwidth limits and don't transfer dmap files to campus should
# be specified in this array.
#
# Dependencies:
#	- pydarnio installed in a virtualenv at $HOME/pydarnio-env
#	- ssh link established between SuperDARN-CSSDP and TELEMETRY computers
#
# Usage: ./convert_on_campus RADAR_ID
# Parameter RADAR_ID: [sas, pgr, rkn, inv, cly]
#
# This script should be run via an inotify daemon triggerring when the previous data flow script 
# finishes execution. To ensure only one instance runs for each site, use flock within the inotify
# daemon code

###################################################################################################

source "${HOME}/data_flow/config.sh"  # Load common data flow variables
source "${HOME}/data_flow/library/data_flow_functions.sh"  # Load in function library
source "${HOME}/pydarnio-env/bin/activate"

###################################################################################################

RADAR_ID=$1

if [[ $# -ne 1 ]]; then
    printf "Usage: ./convert_on_campus RADAR_ID\n"
    exit 1
fi

if [[ ! " ${VALID_RADAR_IDS[*]} " =~ " ${RADAR_ID} " ]]; then
    printf "\"$RADAR_ID\" is not a valid radar ID\n"
    exit 1
fi

# Sites that have to convert dmap files on campus are specified in LOW_BANDWIDTH_SITES within the
# config file. If a site isn't specified there, then this script is skipped and the next data flow 
# script executes immediately

# Define directories
readonly DATA_DIR="/sddata"
readonly SOURCE="${DATA_DIR}/${RADAR_ID}_holding_dir"
readonly DEST="${DATA_DIR}/${RADAR_ID}_data"
readonly PROBLEM_FILES_DEST="${DATA_DIR}/conversion_failure"

# Create log file. New file created daily
readonly LOGGING_DIR="${HOME}/logs/convert_on_campus/$(date +%Y/%m)"
mkdir --parents $LOGGING_DIR
readonly LOGFILE="${LOGGING_DIR}/${RADAR_ID}.$(date +%Y%m%d).convert_on_campus.log"
readonly  SUMMARY_DIR="${HOME}/logs/convert_on_campus/summary/$(date +%Y/%m)"
mkdir --parents $SUMMARY_DIR
readonly SUMMARY_FILE="${SUMMARY_DIR}/${RADAR_ID}.$(date -u +%Y%m%d).convert_on_campus_summary.log"

# Telemetry directory for this script and site
readonly TELEMETRY_SCRIPT_DIR="${TELEMETRY_DIR}/${RADAR_ID}/convert_on_campus"

###################################################################################################

exec &>> $LOGFILE # Redirect STDOUT and STDERR to $LOGFILE

printf "################################################################################\n\n" | tee --append $SUMMARY_FILE

printf "Executing $0 on $(hostname) for ${RADAR_ID}\n" | tee --append $SUMMARY_FILE
date --utc "+%Y%m%d %H:%M:%S UTC" | tee --append $SUMMARY_FILE

if [[ " ${LOW_BANDWIDTH_SITES[*]} " =~ " ${RADAR_ID} " ]]; then

    # Get status info on data_flow and pyDARNio repos
    printf "data_flow: $(git -C ${HOME}/data_flow status | grep "On branch"), last commit: \
            $(git -C ${HOME}/data_flow log -1 --format="%h %cd" --date=iso)\n" | tee --append $SUMMARY_FILE
    printf "pyDARNio: $(git -C ${HOME}/pyDARNio status | grep "On branch"), last commit: \
            $(git -C ${HOME}/pyDARNio log -1 --format="%h %cd" --date=iso)\n" | tee --append $SUMMARY_FILE

    printf "Conversion directory: $DATA_DIR\n\n"

    RAWACF_CONVERT_FILES=$(find "${SOURCE}" -maxdepth 1 -name "*rawacf.hdf5" -type f)

    if [[ -n $RAWACF_CONVERT_FILES ]]; then
        printf "Converting the following files:\n"
        printf '%s\n' "${RAWACF_CONVERT_FILES[@]}"
    else
        printf "No files to be converted.\n" | tee --append $SUMMARY_FILE
    fi

    for f in $RAWACF_CONVERT_FILES
    do
        printf "\nConverting ${f}\n"
        printf "python3 borealis_array_to_dmap.py $(basename ${f})\n"
        python3 "${HOME}/data_flow/superdarn-cssdp/borealis_array_to_dmap.py" $f
        ret=$?
        if [[ $ret -eq 0 ]]; then
            # Move the resulting files if all was successful then remove the source site file.
            dmap_file_start="${f%.rawacf.hdf5}"

            # Remove last character(s) (slice_id)
            slice_id="${dmap_file_start##*.}"
            dmap_file_wo_slice_id="${dmap_file_start%${slice_id}}"

            ordinal_id="$(($slice_id + 97))"
            file_character=$(chr $ordinal_id)
            dmap_file="${dmap_file_wo_slice_id}${file_character}.rawacf.bz2"

            # Unzip the file and check its integrity
            unbzipped_file="${dmap_file%.bz2}"
            printf "bunzip2 ${dmap_file}\n"
            bunzip2 ${dmap_file}    # Unzips in place, file has .bz2 suffix stripped
            printf "python3 test_dmap_integrity.py $(basename ${unbzipped_file})\n"
            python3 "${HOME}/data_flow/superdarn-cssdp/test_dmap_integrity.py" ${unbzipped_file}
            dmap_ret=$?
            if [[ $dmap_ret -eq 0 ]]; then
                # The dmap file is good
                # Rezip the dmap file
                printf "bzip2 ${unbzipped_file}\n"
                bzip2 ${unbzipped_file}   # Zips in place, file has .bz2 suffix added
                mv --verbose $dmap_file $DEST
                mv --verbose $f $DEST
                printf "Successfully converted: ${f}\n" | tee --append $SUMMARY_FILE
            else
                printf "File converted but result was corrupted: ${f}\n" | tee --append $SUMMARY_FILE
                rm --verbose ${unbzipped_file}
                mv --verbose $f $PROBLEM_FILES_DEST
            fi
        else
            printf "File failed to convert: ${f}\n" | tee --append $SUMMARY_FILE
            mv --verbose $f $PROBLEM_FILES_DEST
        fi
    done
else
    printf "\nNot converting files for $RADAR_ID.\n" | tee --append $SUMMARY_FILE
fi

printf "\nFinished $(basename $0). End time: $(date --utc "+%Y%m%d %H:%M:%S UTC")\n\n" | tee --append $SUMMARY_FILE

# Sync summary log file with campus
printf "Syncing $(basename $SUMMARY_FILE) to $TELEMETRY:$TELEMETRY_SCRIPT_DIR\n\n"
rsync --archive --rsh="$TELEMETRY_RSH" $SUMMARY_FILE $TELEMETRY:$TELEMETRY_SCRIPT_DIR

exit
