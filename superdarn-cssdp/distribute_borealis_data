#!/bin/bash
# Copyright 2022 SuperDARN Canada, University of Saskatchewan
# Author: Theodore Kolkman
#
# This script distributes borealis rawacf dmap (bz2) and array (HDF5) 
# data to the following organizations/locations
#   Backs up dmap and array data to campus NAS
#   Stages dmap and array data for the mirror
#   Stages dmap data for sending to British Antarctic Survey (BAS), 
#       Virginia Tech (VT) and National Space Science Center (NSSC)
# Checks all files for integrity and place them in the correct location
# if all tests are passed. If any tests fail, the file isn't transferred
# and a log file explaining what happened is sent to the Engineering 
# dashboard
#
# Based on auto_borealis_share written by Kevin Krieger
#
# Dependencies:
#   - hdf5 (zypper in hdf5)
#
# Usage: ./distribute_borealis_data RADAR_ID
# Parameter RADAR_ID: [sas, pgr, rkn, inv, cly]

readonly RADAR_ID="${1}"

readonly SOURCE="/sddata/${RADAR_ID}_data"
readonly NAS_DIR="/data/borealis_site_data"
readonly MIRROR_STAGING_DIR="/data/holding/globus"
readonly BAS_STAGING_DIR="/home/bas/outgoing/${RADAR_ID}"
readonly VT_STAGING_DIR="/home/vtsd/outgoing/${RADAR_ID}"
readonly NSSC_STAGING_DIR="/home/nssc/outgoing/${RADAR_ID}"

# Create two separate logs: 
#   LOG_FILE: File containing all output from this script
#   SUMMARY_FILE: File for all sites containing only info on errors
readonly LOGGING_DIR="/home/mrcopy/logs/distribute_data/${RADAR_ID}"
mkdir --parents --verbose "${LOGGING_DIR}"
readonly LOG_FILE="${LOGGING_DIR}/$(date -u +%Y-%m).distribute_data_${RADAR_ID}.log"
readonly SUMMARY_DIR="/home/mrcopy/logs/distribute_data/summary_logs"
mkdir --parents --verbose "${SUMMARY_DIR}"
readonly SUMMARY_FILE="${LOGGING_DIR}/$(date -u +%Y-%m).distribute_data_summary.log"

exec &> "${LOG_FILE}"

# Load in functions
source "${HOME}/data_flow/library/data_flow_functions.sh"

# Date in UTC format for logging
echo "$(date --utc) - ${RADAR_ID}" | tee --append "${SUMMARY_FILE}"

# Ensure that only a single instance of this script runs.
if pidof -o %PPID -x -- "$(basename -- $0)" > /dev/null; then
	echo "Error: Script $0 is already running. Exiting..."
	exit 1
fi

dmap_files=$(find ${SOURCE} -name "*rawacf.bz2")
array_files=$(find ${SOURCE} -name "*rawacf.hdf5")

if [[ -n $dmap_files ]]; then
    echo "Distributing the following dmap files" 
    printf '%s\n' "${dmap_files[@]}"
else
    echo "No dmap files found to be transferred."
fi

# Iterate over all dmap files to be transferred
for file in $dmap_files; do
    bzip2 --test "${file}"
    if [[ $? -eq 2 ]]; then
        echo "DMAP file failed bzip2 test: ${file}" | tee --append "${SUMMARY_FILE}"
        # TODO: Set a flag to notify
    else
        echo "\nDistributing ${file}"
        chmod --verbose 664 "${file}"

        # TODO: Do we want to do rsync here instead?
        # TODO: Review changing of groups and permissions differring across destinations

        # Flag will be > 0 if any transfers fail
        transfer_flag=0

        # Place file in vtsd outgoing
        cp --preserve --verbose "${file}" "${VT_STAGING_DIR}/"
        chgrp --verbose sddata "${VT_STAGING_DIR}/${file}"   
        verify_transfer "${file}" "${VT_STAGING_DIR}/${file}" 
        transfer_flag=$((${transfer_flag} + $?))

        # Place file in BAS outgoing
        cp --preserve --verbose "${file}" "${BAS_STAGING_DIR}/"
        chgrp --verbose sddata "${BAS_STAGING_DIR}/${file}"
        verify_transfer "${file}" "${BAS_STAGING_DIR}/${file}"
        transfer_flag=$((${transfer_flag} + $?))
        
        # Place file in NSSC outgoing - Uncommment this when NSSC is ready
        # cp --preserve --verbose "${file}" "${NSSC_STAGING_DIR}/"
        # chgrp --verbose sddata "${NSSC_STAGING_DIR}/${file}"
        # verify_transfer "${file}" "${NSSC_STAGING_DIR}/${file}"
        # transfer_flag=$((${transfer_flag} + $?))

        # Copy for staging to the mirror
        cp --preserve --verbose "${file}" "${MIRROR_STAGING_DIR}"
        verify_transfer "${file}" "${MIRROR_STAGING_DIR}/${file}"
        transfer_flag=$((${transfer_flag} + $?))

        # Move file to campus NAS for long term storage
        year=$(echo ${file} | cut -c 1-4)
        month=$(echo ${file} | cut -c 5-6)
        nas_site_dir="${NAS_DIR}/${RADAR_ID}_rawacf_dmap/${year}/${month}/"
        mkdir --parents "${nas_site_dir}"
        mv --verbose "${file}" "${nas_site_dir}"

        # Check that all files were copied successfully
        if [[ "${transfer_flag}" -ge 0 ]]; then
            echo "File transfer failed: ${file}" | tee --append "${SUMMARY_FILE}"
            # Set flag to notify
        else
            echo "File distributed successfully: ${file}"
        fi
done


if [[ -n $array_files ]]; then
    echo "Distributing the following dmap files" 
    printf '%s\n' "${array_files[@]}"
else
    echo "No dmap files found to be transferred."
fi

# Iterate over all array files and back them up to NAS
for file in $array_files; do
    h5stat "${file}" >& /dev/null
    if [[ $? -ne 0 ]]; then
        echo "Array file failed h5stat test: ${file}" | tee --append "${SUMMARY_FILE}"
        # TODO: Set a flag to notify
    else
        echo "\nDistributing ${file}"
        chmod --verbose 664 "${file}"

        # TODO: Do we want to do rsync here instead?
        # TODO: Review changing of groups and permissions differring across destinations

        # TODO: array files aren't synced to mirror - do we still want to back them up in the holding directory?

        year=$(echo ${file} | cut -c 1-4)
        month=$(echo ${file} | cut -c 5-6)
        nas_site_dir="${NAS_DIR}/${RADAR_ID}_rawacf/${year}/${month}/"
        mkdir --parents "${nas_site_dir}"
        mv --verbose "${file}" "${nas_site_dir}"
    fi
done

# TODO: Handle flags for inotify here

# TODO: Send notification if errors occur
printf "Finished distributing data. End time: $(date -u)\n\n\n"
