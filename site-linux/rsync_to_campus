#!/bin/bash
# Copyright 2019 SuperDARN Canada, University of Saskatchewan
# Author: Dieter Andre
#
# Major revision: October 2022 by Theo Kolkman
# Refactored for inotify usage
#
# A singleton script to transfer rawacf dmap and hdf5 files from site NAS to superdarn-cssdp on 
# campus. Files are copied first and removed once copy is confirmed to be successful. 
#
# To modify this script to transfer files from a local Site-Linux directory instead of the NAS:
#	1. Remove RADAR_ID for the specified site from NAS_SITES in config.sh
#
# Dependencies:
# 	- RADAR_ID and SDCOPY set as environment variables in ${HOME}/.profile
#	- ssh link established between Site-Linux and SDCOPY computers
#	- ssh link established between Site-Linux and TELEMETRY computers
#
# This script should be run via an inotify daemon triggerring when the previous data flow script 
# finishes execution

###################################################################################################

source "${HOME}/.profile"	# Load in environment variables
source "${HOME}/data_flow/config.sh"  # Load common data flow variables
source "${HOME}/data_flow/library/data_flow_functions.sh" # Load dataflow functions

###################################################################################################

# Location rawacf files are transferring from
if [[ " ${NAS_SITES[*]} " =~ " ${RADAR_ID} " ]]; then
	readonly DATA_DIR="/borealis_nfs/borealis_data" # On NAS
else
	readonly DATA_DIR="/data/borealis_data" # On Site Linux
fi
readonly DMAP_SOURCE="${DATA_DIR}/rawacf_dmap/"
readonly ARRAY_SOURCE="${DATA_DIR}/rawacf_array/"

# If site isn't transferring dmap files, send to holding directory for campus conversion
if [[ " ${LOW_BANDWIDTH_SITES[*]} " =~ " ${RADAR_ID} " ]]; then
	readonly DEST="/sddata/${RADAR_ID}_holding_dir"
else
	readonly DEST="/sddata/${RADAR_ID}_data/"
fi

# Create log file. New file created daily
readonly LOGGING_DIR="${HOME}/logs/rsync_to_campus/$(date +%Y/%m)"
mkdir --parents $LOGGING_DIR
readonly LOGFILE="${LOGGING_DIR}/$(date +%Y%m%d).rsync_to_campus.log"
readonly SUMMARY_DIR="${HOME}/logs/rsync_to_campus/summary/$(date +%Y/%m)"
mkdir --parents $SUMMARY_DIR
readonly SUMMARY_FILE="${SUMMARY_DIR}/$(date -u +%Y%m%d).rsync_to_campus_summary.log"

# Telemetry directory for this script and site
readonly TELEMETRY_SCRIPT_DIR="${TELEMETRY_DIR}/${RADAR_ID}/rsync_to_campus"

###################################################################################################

# Ensure that only a single instance of this script runs.
if pidof -o %PPID -x -- "$(basename -- $0)" > /dev/null; then
	printf "Error: Script $0 is already running. Exiting...\n"
	exit 1
fi

exec &>> $LOGFILE # Redirect STDOUT and STDERR to $LOGFILE

printf "################################################################################\n\n" | tee --append $SUMMARY_FILE

# Date in UTC format for logging
printf "Executing $0 on $(hostname) for ${RADAR_ID}\n" | tee --append $SUMMARY_FILE
date --utc "+%Y%m%d %H:%M:%S UTC" | tee --append $SUMMARY_FILE

# Get status info on data_flow and pyDARNio repos
printf "data_flow: $(git -C ${HOME}/data_flow status | grep "On branch"), last commit: \
		$(git -C ${HOME}/data_flow log -1 --format="%h %cd" --date=iso)\n" | tee --append $SUMMARY_FILE
printf "pyDARNio: $(git -C ${HOME}/pyDARNio status | grep "On branch"), last commit: \
		$(git -C ${HOME}/pyDARNio log -1 --format="%h %cd" --date=iso)\n" | tee --append $SUMMARY_FILE

printf "Transferring from: $DATA_DIR\n" | tee --append $SUMMARY_FILE
printf "Transferring to: $SDCOPY:$DEST\n\n" | tee --append $SUMMARY_FILE

# Check if this site is transferring dmaps to campus
if [[ ! " ${LOW_BANDWIDTH_SITES[*]} " =~ " ${RADAR_ID} " ]]; then
	# Find all dmap files to transfer
	files=$(find ${DMAP_SOURCE} -name '*rawacf.bz2' -printf '%p\n')

	if [[ -n $files ]]; then
		printf "\nPlacing following dmap files in ${SDCOPY}:${DEST}:\n"
		printf '%s\n' "${files[@]}"
	else
		printf "No dmap files found to be transferred.\n" | tee --append $SUMMARY_FILE
	fi

	# Transfer all files found
	for file in $files; do
		printf "\nTransferring: ${file} to ${SDCOPY}:${DEST}\n"
		rsync -av --append-verify --timeout=180 --rsh=ssh $file $SDCOPY:$DEST

		# Check if transfer was okay using the md5sum program, then remove the file if it matches
		verify_transfer $file "${DEST}/$(basename $file)" $SDCOPY
		return_value=$?
		if [[ $return_value -eq 0 ]]; then
			printf "Successfully transferred: ${file}\n" | tee --append $SUMMARY_FILE
			printf "Deleting file...\n"
			rm --verbose $file
		else
            # If file not transferred successfully, don't delete and try again next time
			printf "Transfer failed: ${file}\n" | tee --append $SUMMARY_FILE
			printf "File not deleted.\n"
		fi
	done
else
	printf "Not transferring any dmap files\n" | tee --append $SUMMARY_FILE
fi


# Find all hdf5 files to transfer
files=$(find ${ARRAY_SOURCE} -name '*rawacf.hdf5' -printf '%p\n')

if [[ -n $files ]]; then
	printf "\n\nPlacing following hdf5 files in ${SDCOPY}:${DEST}:\n"
	printf '%s\n' "${files[@]}"
else
	printf "\nNo array files found to be transferred.\n" | tee --append $SUMMARY_FILE
fi

# Transfer all files found
for file in $files; do
	printf "\nTransferring: ${file}\n"
	rsync -av --append-verify --timeout=180 --rsh=ssh $file $SDCOPY:$DEST

	# Check if transfer was okay using the md5sum program
	verify_transfer $file "${DEST}/$(basename $file)" $SDCOPY
	return_value=$?
	if [[ $return_value -eq 0 ]]; then
		printf "Successfully transferred: ${file}\n" | tee --append $SUMMARY_FILE
		printf "Deleting file...\n"
		rm --verbose $file
	else
		# If file not transferred successfully, don't delete and try again next time
		printf "Transfer failed: ${file}\n" | tee --append $SUMMARY_FILE
		printf "File not deleted.\n"
	fi
done

printf "\nFinished $(basename $0). End time: $(date --utc "+%Y%m%d %H:%M:%S UTC")\n\n" | tee --append $SUMMARY_FILE

# Sync summary log file with campus
printf "Syncing $(basename $SUMMARY_FILE) to $TELEMETRY:$TELEMETRY_SCRIPT_DIR\n\n"
rsync --archive --rsh="$TELEMETRY_RSH" $SUMMARY_FILE $TELEMETRY:$TELEMETRY_SCRIPT_DIR

exit
