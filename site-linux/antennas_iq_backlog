#!/bin/bash
# Copyright 2022 SuperDARN Canada, University of Saskatchewan
# Author: Theodore Kolkman
#
# A script that uses pydarnio to restructure antennas_iq files. Used for restructuring large 
# amounts of backed-up antennas_iq files. Converted files remain in the same directory after 
# completion, if files fail conversion they are moved to a separate directory.

# Modified from convert_and_restructure script
#
# Dependencies:
#	- pydarnio installed in a virtualenv at $HOME/pydarnio-env
# 	- RADARNAME and RADARID set as environment variables in $HOME/.bashrc

###################################################################################################

source "${HOME}/.bashrc"    # source the RADARID, SDCOPY and other things
source "${HOME}/data_flow/config.sh"  # Load common data flow variables
source "${HOME}/data_flow/library/data_flow_functions.sh" # Load in function library
source "${HOME}/pydarnio-env/bin/activate"

###################################################################################################

# Define directories
readonly DATA_DIR="/borealis_nfs/borealis_data"
readonly SOURCE="${DATA_DIR}/antennas_iq_array" # Files converted remain in this directory
readonly PROBLEM_FILES_DEST="${DATA_DIR}/conversion_failure"

# Create log file. New file created daily
readonly LOGGING_DIR="${HOME}/logs"
mkdir --parents $LOGGING_DIR
readonly LOGFILE="${LOGGING_DIR}/$(date +%Y%m%d).antennas_iq_backlog.log"
readonly SUMMARY_FILE="${LOGGING_DIR}/antennas_iq_backlog_summary.log"

###################################################################################################

# Ensure that only a single instance of this script runs.
if pidof -o %PPID -x -- "$(basename -- $0)" > /dev/null; then
	printf "Error: Script $0 is already running. Exiting...\n"
	exit 1
fi

exec &>> $LOGFILE # Redirect STDOUT and STDERR to $LOGFILE

printf "################################################################################\n\n" | tee --append $SUMMARY_FILE

printf "Executing $0 on $(hostname)\n" | tee --append $SUMMARY_FILE
date --utc "+%Y%m%d %H:%M:%S UTC" | tee --append $SUMMARY_FILE

# Get status info on data_flow and pyDARNio repos
printf "data_flow repo: $(git -C ${HOME}/data_flow status | grep "On branch"), last commit: \
		$(git -C ${HOME}/data_flow log -1 --format="%h %cd" --date=iso)\n" | tee --append $SUMMARY_FILE
printf "pyDARNio repo: $(git -C ${HOME}/pyDARNio status | grep "On branch"), last commit: \
		$(git -C ${HOME}/pyDARNio log -1 --format="%h %cd" --date=iso)\n" | tee --append $SUMMARY_FILE
        
printf "Conversion directory: $DATA_DIR\n\n" | tee --append $SUMMARY_FILE

num_files=$(echo $ANTENNAS_IQ_CONVERT_FILES | wc -w)
count=1

# Find files to be converted
ANTENNAS_IQ_CONVERT_FILES=$(find "${SOURCE}" -name "*antennas_iq.hdf5.site" -type f)

if [[ -n $ANTENNAS_IQ_CONVERT_FILES ]]; then
    printf "Number of files converting: ${num_files}\n\n"
	printf "Converting the following antennas_iq files:\n"
	printf '%s\n' "${ANTENNAS_IQ_CONVERT_FILES[@]}"
else
	printf "No antennas_iq files found to be converted.\n" | tee --append $SUMMARY_FILE
fi

# Convert antennas_iq files to array format
for f in $ANTENNAS_IQ_CONVERT_FILES; do
    if [[ " ${ANTENNAS_IQ_SITES[*]} " =~ " ${RADARID} " ]]; then
        date --utc "+%Y%m%d %H:%M:%S UTC"
        printf "\nConverting file # ${count} of ${num_files}: ${f}\n" | tee --append $SUMMARY_FILE
        printf "python3 remove_record.py $(basename ${f})\n"
        output=$(python3 ${HOME}/data_flow/site-linux/remove_record.py ${f})
        if [[ -n "$output" ]]; then
            printf "Removed records from ${f}:\n${remove_records_output}\n" | tee --append $SUMMARY_FILE
        fi

        # Use BorealisRestructure if site has low memory
        if [[ " ${LOW_MEMORY_SITES[*]} " =~ " ${RADARID} " ]]; then 
            printf "python3 borealis_convert_file.py --low_memory $(basename ${f})\n"
            python3 "${HOME}/data_flow/site-linux/borealis_convert_file.py" --low_memory $f
        else 
            printf "python3 borealis_convert_file.py $(basename ${f})\n"
            python3 "${HOME}/data_flow/site-linux/borealis_convert_file.py" $f
        fi
        ret=$?

        if [ $ret -eq 0 ]; then
            # then remove source site file.
            # The array file will remain in the source directory (antennas_iq_array)
            rm --verbose $f
            printf "Successfully converted: ${f}\n" | tee --append $SUMMARY_FILE
        else
            printf "File failed to convert: ${f}\n" | tee --append $SUMMARY_FILE
            mv --verbose $f $PROBLEM_FILES_DEST
        fi
        count=$(( count + 1 ))
    else
        printf "Not converting: ${f}\n" | tee --append $SUMMARY_FILE
    fi
done

printf "\nFinished $(basename $0). End time: $(date --utc "+%Y%m%d %H:%M:%S UTC")\n\n" | tee --append $SUMMARY_FILE

exit