#!/bin/bash
# Copyright 2025 SuperDARN Canada, University of Saskatchewan Author: Theodore Kolkman
#
# A singleton script to transfer security camera photos to campus. The photos are saved on the site
# NAS and are transferred to an on-campus NAS via sdc-serv.

#
# Dependencies:
# - RADAR_ID and SDCOPY set as environment variables in ${HOME}/.profile
#	- ssh link established between Site-Linux and SDCOPY computers
#	- ssh link established between Site-Linux and TELEMETRY computers
# - ${HOME}/.ssh/controlmasters/ directory exists
# - ${HOME}/.ssh/config has the following ([xxxx] indicates you should fill this in intelligently):
# HOST [SDCOPY address, either IP or hostname]
#     User [SDCOPY username]
#     ControlPath ~/.ssh/controlmasters/%C
#     ControlMaster auto
#     ControlPersist 10m
#
# This script can be run alongside the other data_flow scripts on the site-linux computer.

###################################################################################################

source "${HOME}/.profile"	# Load in environment variables
source "${HOME}/data_flow/config.sh"  # Load common data flow variables
source "${HOME}/data_flow/library/data_flow_functions.sh" # Load dataflow functions

###################################################################################################

# Location all files will be transferring from
readonly PHOTO_SOURCE="/borealis_nfs/cam/"

readonly PHOTO_DEST="/home/logman/cam/${RADAR_ID}cam/"


# Create log file. New file created daily
readonly LOGGING_DIR="${HOME}/logs/transfer_cam_photos/$(date +%Y/%m)"
mkdir --parents $LOGGING_DIR
readonly LOGFILE="${LOGGING_DIR}/$(date +%Y%m%d).transfer_cam_photos.log"
readonly SUMMARY_DIR="${HOME}/logs/transfer_cam_photos/summary/$(date +%Y/%m)"
mkdir --parents $SUMMARY_DIR
readonly SUMMARY_FILE="${SUMMARY_DIR}/$(date -u +%Y%m%d).transfer_cam_photos_summary.log"


###################################################################################################

# Ensure that only a single instance of this script runs.
if pidof -o %PPID -x -- "$(basename -- $0)" > /dev/null; then
	printf "Error: Script $0 is already running. Exiting...\n"
	exit 1
fi

exec &>> $LOGFILE # Redirect STDOUT and STDERR to $LOGFILE

printf "################################################################################\n\n" | tee --append $SUMMARY_FILE

# Date in UTC format for logging
printf "Executing $0 on $(hostname) for ${RADAR_ID}\n" | tee --append $SUMMARY_FILE
date --utc "+%Y%m%d %H:%M:%S UTC" | tee --append $SUMMARY_FILE

# Get status info on data_flow repo
printf "data_flow: $(git -C ${HOME}/data_flow status | grep "On branch"), last commit: \
		$(git -C ${HOME}/data_flow log -1 --format="%h %cd" --date=iso)\n" | tee --append $SUMMARY_FILE


printf "Transferring from: $PHOTO_SOURCE\n" | tee --append $SUMMARY_FILE
printf "Transferring to: $SDCOPY:$PHOTO_DEST\n\n" | tee --append $SUMMARY_FILE


# Establish multiplexed SSH connection for all rsync's to $SDCOPY
# -N: do not execute a remote command on ${SDCOPY}
# -f: run in the background
ssh -N -f ${SDCOPY}

# Verify the multiplexed session is running
ssh -O check ${SDCOPY}
return_value=$?
if [[ $? -ne 0 ]]; then
    printf "Could not establish connection to ${SDCOPY}\n" | tee --append $SUMMARY_FILE
    printf "Exiting...\n"
    exit
fi


# Find files to be transferred
cam210_files=$(find ${PHOTO_SOURCE} -name '*cam210*.jpg' -printf '%p\n')
cam211_files=$(find ${PHOTO_SOURCE} -name '*cam211*.jpg' -printf '%p\n')
cam212_files=$(find ${PHOTO_SOURCE} -name '*cam212*.jpg' -printf '%p\n')

if [[ -z "$cam210_files" && -z "$cam211_files" && -z "$cam212_files" ]]; then
    printf "No camera photos found to be transferred.\n" | tee --append $SUMMARY_FILE
fi

# Transfer all files found
for file in $cam210_files; do
    filedate=$(basename $file | cut -d '.' -f 1)
    sub_dest="${RADAR_ID}cam210/$(date -d $filedate +%Y/%m/)"

	printf "\nTransferring: ${file} to ${SDCOPY}:${PHOTO_DEST}${sub_dest}\n"
    # Set permissions of new directories to 775 and new files to 664. New directories will
    # automatically be created.
    rsync -av --rsh=ssh --rsync-path="umask 002 && rsync" --chmod=D775,F664 $file $SDCOPY:${PHOTO_DEST}${sub_dest}done

for file in $cam211_files; do
    filedate=$(basename $file | cut -d '.' -f 1)
    sub_dest="${RADAR_ID}cam211/$(date -d $filedate +%Y/%m/)"

	printf "\nTransferring: ${file} to ${SDCOPY}:${PHOTO_DEST}${sub_dest}\n"
    # Set permissions of new directories to 775 and new files to 664. New directories will
    # automatically be created.
    rsync -av --rsh=ssh --rsync-path="umask 002 && rsync" --chmod=D775,F664 $file $SDCOPY:${PHOTO_DEST}${sub_dest}done

for file in $cam212_files; do
    filedate=$(basename $file | cut -d '.' -f 1)
    sub_dest="${RADAR_ID}cam212/$(date -d $filedate +%Y/%m/)"

	printf "\nTransferring: ${file} to ${SDCOPY}:${PHOTO_DEST}${sub_dest}\n"
    # Set permissions of new directories to 775 and new files to 664. New directories will
    # automatically be created.
    rsync -av --rsh=ssh --rsync-path="umask 002 && rsync" --chmod=D775,F664 $file $SDCOPY:${PHOTO_DEST}${sub_dest}
done

printf "\nFinished $(basename $0). End time: $(date --utc "+%Y%m%d %H:%M:%S UTC")\n\n" | tee --append $SUMMARY_FILE

exit
