#!/bin/bash
# Copyright 2019 SuperDARN Canada, University of Saskatchewan
# Author: Marci Detwiller
#
# Last Edited: September 2022 by Theo Kolkman
# Refactored for inotify usage
#
# A script that uses pydarnio to convert Borealis files to SDARN DMap files
# as well as restructures the hdf5 files to be multidimensional arrays
# for better file readability. Backs up the source site files before it
# begins.
#
# Dependencies:
#	- pydarnio installed in a virtualenv at $HOME/pydarnio-env
# 	- RADARNAME and RADARID set as environment variables in $HOME/.bashrc
#
# This script should be run via an inotify daemon triggerring when the
# rsync_to_nas finished transferring files 

##############################################################################

# Specify error behaviour
set -o errexit   # abort on nonzero exitstatus
set -o nounset   # abort on unbound variable
set -o pipefail  # don't hide errors within pipes

# source the RADARID, SDCOPY and other things
source "${HOME}/.bashrc"
# Load in function library
source "${HOME}/data_flow/library/data_flow_functions.sh"

##############################################################################

# Define directories
readonly DATA_DIR="/borealis_nfs/borealis_data"
# DATA_DIR=/home/radar/testing/data_flow_testing/data #TESTING
readonly SOURCE="${DATA_DIR}/daily" # this is the source
readonly RAWACF_DMAP_DEST="${DATA_DIR}/rawacf_dmap"
readonly RAWACF_ARRAY_DEST="${DATA_DIR}/rawacf_array"
readonly BFIQ_ARRAY_DEST="${DATA_DIR}/bfiq_array"
readonly ANTENNAS_IQ_ARRAY_DEST="${DATA_DIR}/antennas_iq_array"
readonly BACKUP_DEST="${DATA_DIR}/backup"
readonly PROBLEM_FILES_DEST="${DATA_DIR}/conversion_failure"

# Specify which sites will convert each file type
readonly RAWACF_SITES=("sas" "pgr" "inv" "cly" "rkn" "lab") #TESTING
readonly BFIQ_SITES=("sas" "pgr" "inv" "cly" "rkn" "lab") #TESTING
readonly ANTENNAS_IQ_SITES=("sas" "cly")

# Flag received from rsync_to_nas script to trigger this script
readonly FLAG_IN="${HOME}/data_flow/.inotify_watchdir/.rsync_to_nas_flag"

# Location of inotify watch directory for flags on site linux
readonly FLAG_DEST="${HOME}/data_flow/.inotify_watchdir"

# Flag sent out to trigger rsync_to_campus script
readonly FLAG_OUT="${HOME}/data_flow/.inotify_flags/.convert_and_restructure_flag"

# Create log file. New file created daily
readonly LOGGING_DIR="${HOME}/logs/convert_and_restructure/$(date +%Y)/$(date +%m)"
mkdir --parents $LOGGING_DIR
readonly LOGFILE="${LOGGING_DIR}/$(date +%Y%m%d).convert_and_restructure.log"
readonly  SUMMARY_DIR="${HOME}/logs/convert_and_restructure/summary/$(date +%Y)/$(date +%m)"
mkdir --parents $SUMMARY_DIR
readonly SUMMARY_FILE="${SUMMARY_DIR}/$(date -u +%Y%m%d).convert_summary.log"

##############################################################################

# Redirect all stdout and sterr in this script to $LOGFILE
exec &>> $LOGFILE

printf "################################################################################\n\n" | tee --append $SUMMARY_FILE

printf "Executing $(basename "$0") on $(hostname)\n" | tee --append $SUMMARY_FILE
date --utc "+%Y%m%d %H:%M:%S UTC" | tee --append $SUMMARY_FILE

# Ensure that only a single instance of this script runs.
if pidof -o %PPID -x -- "$(basename -- $0)" > /dev/null; then
	echo "Error: Script $0 is already running. Exiting..."
	exit 1
fi

# Copy the source rawacf file to backup.
printf "\nBacking up rawacf and bfiq .site files:\n"
cp --verbose $SOURCE/*rawacf.hdf5.site $BACKUP_DEST
cp --verbose $SOURCE/*bfiq.hdf5.site $BACKUP_DEST

RAWACF_CONVERT_FILES=$(find "${SOURCE}" -name "*rawacf.hdf5.site" -type f)
BFIQ_CONVERT_FILES=$(find "${SOURCE}" -name "*bfiq.hdf5.site" -type f)
ANTENNAS_IQ_CONVERT_FILES=$(find "${SOURCE}" -name "*antennas_iq.hdf5.site" -type f)
source "${HOME}/pydarnio-env/bin/activate"

if [[ -n $RAWACF_CONVERT_FILES ]]; then
	printf "\n\nConverting the following rawacf files:\n"
	printf '%s\n' "${RAWACF_CONVERT_FILES[@]}"
else
	printf "\nNo rawacf files to be converted.\n"
fi

# Convert rawacf files to array and dmap format
for f in $RAWACF_CONVERT_FILES; do
    if [[ " ${RAWACF_SITES[*]} " =~ " ${RADAR_ID} " ]]; then
        printf "\nConverting ${f}\n"
        printf "python3 remove_record.py $(basename ${f})\n"
        remove_record_output=$(python3 ${HOME}/data_flow/site-linux/remove_record.py ${f})
        if [[ -n "$remove_record_output" ]]; then
            printf "Removed records from ${f}:\n${remove_records_output}\n" | tee --append $SUMMARY_FILE
        fi
        printf "python3 borealis_convert_file.py --dmap $(basename ${f})\n"
        python3 "${HOME}/data_flow/site-linux/borealis_convert_file.py" --dmap $f
        ret=$?
        if [[ $ret -eq 0 ]]; then
            # move the resulting files if all was successful
            # then remove the source site file.
            dmap_file_start="${f%.rawacf.hdf5.site}"

            # remove last character(s) (slice_id)
            slice_id="${dmap_file_start##*.}"
            dmap_file_wo_slice_id="${dmap_file_start%${slice_id}}"

            ordinal_id="$(($slice_id + 97))"
            file_character=$(chr $ordinal_id)
            dmap_file="${dmap_file_wo_slice_id}${file_character}.rawacf.bz2"
            mv --verbose $dmap_file $RAWACF_DMAP_DEST
            array_file="${f%.site}"
            mv --verbose $array_file $RAWACF_ARRAY_DEST
            rm --verbose $f
            printf "Successfully converted: ${f}\n" | tee --append $SUMMARY_FILE
        else
            printf "File failed to convert: ${f}\n" | tee --append $SUMMARY_FILE
            mv --verbose $f $PROBLEM_FILES_DEST
        fi
    else
        printf "Not converting: ${f}\n" | tee --append $SUMMARY_FILE
        mv --verbose $f $RAWACF_ARRAY_DEST
    fi
done


if [[ -n $BFIQ_CONVERT_FILES ]]; then
	printf "\nConverting the following bfiq files:\n"
	printf '%s\n' "${BFIQ_CONVERT_FILES[@]}"
else
	printf "\nNo bfiq files to be converted.\n"
fi

# Convert bfiq files to array format
for f in $BFIQ_CONVERT_FILES; do
    if [[ " ${BFIQ_SITES[*]} " =~ " ${RADAR_ID} " ]]; then
        printf "\nConverting ${f}\n"
        printf "python3 remove_record.py $(basename ${f})\n"
        remove_record_output=$(python3 ${HOME}/data_flow/site-linux/remove_record.py ${f})
        if [[ -n "$remove_record_output" ]]; then
            printf "Removed records from ${f}:\n${remove_records_output}\n" | tee --append $SUMMARY_FILE
        fi
        printf "python3 borealis_convert_file.py --dmap $(basename ${f})\n"
        python3 "${HOME}/data_flow/site-linux/borealis_convert_file.py" $f
        ret=$?
        if [[ $ret -eq 0 ]]; then
            # Only converting array file
            array_file="${f%.site}"
            mv --verbose $array_file $BFIQ_ARRAY_DEST
            rm --verbose $f
            printf "Successfully converted: ${f}\n" | tee --append $SUMMARY_FILE
        else
            printf "File failed to convert: ${f}\n" | tee --append $SUMMARY_FILE
            mv --verbose $f $PROBLEM_FILES_DEST
        fi
    else
        printf "Not converting: ${f}\n" | tee --append $SUMMARY_FILE
        mv --verbose $f $BFIQ_ARRAY_DEST
    fi
done


if [[ -n $ANTENNAS_IQ_CONVERT_FILES ]]; then
	printf "\nConverting the following antennas_iq files:\n"
	printf '%s\n' "${ANTENNAS_IQ_CONVERT_FILES[@]}"
else
	printf "\nNo antennas_iq files to be converted.\n"
fi

# Convert antennas_iq files to array format
for f in $ANTENNAS_IQ_CONVERT_FILES; do
    if [[ " ${ANTENNAS_IQ_SITES[*]} " =~ " ${RADAR_ID} " ]]; then
        printf "\nConverting ${f}\n"
        printf "python3 remove_record.py $(basename ${f})\n"
        remove_record_output=$(python3 ${HOME}/data_flow/site-linux/remove_record.py ${f})
        if [[ -n "$remove_record_output" ]]; then
            printf "Removed records from ${f}:\n${remove_records_output}\n" | tee --append $SUMMARY_FILE
        fi
        printf "python3 borealis_convert_file.py --dmap $(basename ${f})\n"
        python3 "${HOME}/data_flow/site-linux/borealis_convert_file.py" $f
        ret=$?
        if [ $ret -eq 0 ]; then
            # then remove source site file.
            array_file="${f%.site}"
            mv --verbose $array_file $ANTENNAS_IQ_ARRAY_DEST
            rm --verbose $f
            printf "Successfully converted: ${f}\n" | tee --append $SUMMARY_FILE
        else
            printf "File failed to convert: ${f}\n" | tee --append $SUMMARY_FILE
            mv --verbose $f $PROBLEM_FILES_DEST
        fi
    else
        printf "Not converting: ${f}\n" | tee --append $SUMMARY_FILE
        mv --verbose $f  $ANTENNAS_IQ_ARRAY_DEST
    fi
done

printf "\nTriggering next script via inotify...\n"
# Remove "flag" sent by rsync_to_nas to reset flag
# and allow inotify to see the next flag sent in
rm --verbose $FLAG_IN

# Send out "flag" to trigger next script with inotify
touch $FLAG_OUT
rsync -av --rsh=ssh $FLAG_OUT $FLAG_DEST

printf "\nFinished file conversion. End time: $(date --utc "+%Y%m%d %H:%M:%S UTC")\n\n" | tee --append $SUMMARY_FILE

exit