#!/bin/bash
# Copyright 2024 SuperDARN Canada, University of Saskatchewan
# Author: Remington Rohel, Draven Galeschuk
#
# A script that the most recently generated rawacfs and creates antennas
# iq plots for each channel.
#
# Dependencies????????
#
# This script gets the latest antennas_iq files from data_dir (defined below) and plots the
# data within.

###################################################################################################

source "${HOME}/.profile"	# Load in environment variables
source "${HOME}/data_flow/config.sh"  # Load common data flow variables
source "${HOME}/data_flow/library/data_flow_functions.sh" # Load in function library
source "${HOME}/pydarnio-env/bin/activate"

###################################################################################################

# Define directories
readonly DATA_DIR=/borealis_nfs/borealis_data/antennas_iq_array/
readonly FAILED_FILE_DEST=/borealis_nfs/borealis_data/conversion_failure/
readonly PLOT_DEST=${HOME}/logging/daily_plots/
readonly FULLSIZE_DEST=${HOME}/logging/daily_plots/fullsize/
readonly FAILED_RESIZE_DEST=${HOME}/logging/daily_plots/failed_resize/

# Check the existence of the necessary directories.
mkdir --parents $PLOT_DEST
mkdir --parents $FULLSIZE_DEST
mkdir --parents $FAILED_RESIZE_DEST

# Create log file. New file created daily
readonly LOGGING_DIR="${HOME}/logs/plot_antennas_iq/$(date +%Y/%m)"
mkdir --parents $LOGGING_DIR
readonly LOGFILE="${LOGGING_DIR}/$(date +%Y%m%d).plot_antennas_iq.log"
readonly  SUMMARY_DIR="${HOME}/logs/plot_antennas_iq/summary/$(date +%Y/%m)"
mkdir --parents $SUMMARY_DIR
readonly SUMMARY_FILE="${SUMMARY_DIR}/$(date -u +%Y%m%d).plot_antennas_iq_summary.log"

# Telemetry directory for this script and site
readonly TELEMETRY_SCRIPT_DIR="${TELEMETRY_DIR}/${RADAR_ID}/plot_antennas_iq"

###################################################################################################

# Function to reduce size of the plots
# Copied from https://www.smashingmagazine.com/2015/06/efficient-image-resizing-with-imagemagick/#bash-shell
smartresize() {
  # Takes 3 args: input image, desired width (px), and output_directory.
  # Scales and compresses image, maintaining aspect ratio.
  mogrify -path "$3" -filter Triangle -define filter:support=2 -thumbnail "$2" \
          -unsharp 0.25x0.08+8.3+0.045 -dither None -posterize 136 -quality 82 \
          -define jpeg:fancy-upsampling=off -define png:compression-filter=5 \
          -define png:compression-level=9 -define png:compression-strategy=1 \
          -define png:exclude-chunk=all -interlace none -colorspace sRGB "$1"
}

###################################################################################################

# Ensure that only a single instance of this script runs.
if pidof -o %PPID -x -- "$(basename -- $0)" > /dev/null; then
	printf "Error: Script $0 is already running. Exiting...\n"
	exit 1
fi

exec &>> $LOGFILE # Redirect STDOUT and STDERR to $LOGFILE

printf "################################################################################\n\n" | tee --append $SUMMARY_FILE

printf "Executing $0 on $(hostname) for ${RADAR_ID}\n" | tee --append $SUMMARY_FILE
date --utc "+%Y%m%d %H:%M:%S UTC" | tee --append $SUMMARY_FIL

# Get status info on data_flow and pyDARNio repos
printf "data_flow: $(git -C ${HOME}/data_flow status | grep "On branch"), last commit: \
		$(git -C ${HOME}/data_flow log -1 --format="%h %cd" --date=iso)\n" | tee --append $SUMMARY_FILE

printf "IQ plot directory: $PLOT_DEST\n\n" | tee --append $SUMMARY_FILE


# Find the most recent 2 hours of files to make plots for
now=$(date -u +%s)  # seconds since epoch

# Find out when the previous 2-hr window started
# search_1 = YYYYMMDD.HH for 2 hours ago
search_1=$(date -d @$((now - 7200)) +%Y%m%d.%H)

# Find the previous hour
# search_2 = YYYYMMDD.HH for 1 hour ago
search_2=$(date -d @$((now - 3600)) +%Y%m%d.%H)

# Get the files from the past two hours (matching search_1 or search_2 in the data_dir and failed_dir)
daily_files=$(find "${DATA_DIR}" "${FAILED_FILE_DEST}" -type f -regex ".*\(${search_1}\|${search_2}\).*0.antennas.*")

printf "\n\n"
if [[ -n $daily_files ]]; then
	printf "Generating IQ plots:\n"
	printf '%s\n' "${daily_files[@]}"
else
	printf "No antenna iq files found to plot.\n" | tee --append $SUMMARY_FILE
fi

for f in ${daily_files}; do
  printf "\nPlotting ${f}\n"

  python3 ${HOME}/data_flow/site-linux/iq_plotting.py "${f}" --plot-directory=${FULLSIZE_DEST}

  if [ $? -eq 0 ]; then
    printf "Successfully converted: ${f}\n" | tee --append $SUMMARY_FILE
  else
     error="Failed to generate iq plot from: ${f}\n"
     printf "${error}" | tee --append $SUMMARY_FILE

     message="$(date +'%Y%m%d %H:%M:%S')   ${RADAR_ID} - ${error}"
     alert_slack "${message}" "${SLACK_DATAFLOW_WEBHOOK}"
  fi
done

# Only need to resize plots if there were files to make
if [[ -n $daily_files ]]; then
  # Get the names of all plots just generated
  daily_plots=$(ls ${FULLSIZE_DEST}/*.{png,jpg})
  if [[ -z daily_plots ]]; then
    printf "Unable to find files to resize...\n" | tee --append $SUMMARY_FILE
  fi

  # Resize the images to a desired pixel width
  for img in ${daily_plots}; do
    printf "Resizing file: ${f}\n" | tee --append $SUMMARY_FILE
	  smartresize ${img} 1000 ${PLOT_DEST}
	  if [ $? -eq 0 ]; then
	    rm --verbose ${img}
	  else
	    printf "Failed to resize ${img}"
	    mv --verbose ${img} ${FAILED_RESIZE_DEST}
    fi
  done
fi

printf "\nFinished $(basename $0). End time: $(date --utc "+%Y%m%d %H:%M:%S UTC")\n\n" | tee --append $SUMMARY_FILE

# Sync summary log file with campus
printf "Syncing $(basename $SUMMARY_FILE) to $TELEMETRY:$TELEMETRY_SCRIPT_DIR\n\n"
rsync --archive --rsh="$TELEMETRY_RSH" $SUMMARY_FILE $TELEMETRY:$TELEMETRY_SCRIPT_DIR

exit