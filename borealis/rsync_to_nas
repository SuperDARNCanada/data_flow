#!/bin/bash
# Copyright 2019 SuperDARN Canada, University of Saskatchewan
# Author: Kevin Krieger
#
# Last Edited: September 2022 by Theo Kolkman
# Refactored for inotify usage
#
# A singleton script to copy the data FILES to the on-site linux computer,
# removing them locally after a successful copy.
#
# Dependencies:
#	- jq (installed via zypper)
# 	- BOREALISPATH and SITE_LINUX set as environment variables in $HOME/.profile
#
# This script should be run via an inotify daemon triggering whenever
# 2-hour Borealis site files finish writing
#
# inotify watches the directory Borealis writes to, and triggers the rsync_to_nas
# script only when a 2-hour site file is created. Since these files are only created
# once, and once they're created the previous 2-hour block is finished writing, 
# the rsync_to_nas script will execute immediately after Borealis finishes writing
# the previous 2-hour file. To distinguish between the previous (finished writing) and
# current (currently writing) 2-hour file, the `find` command must be used as specified
# in the script below.
#
# Param 1: Borealis file name that script was triggered on. This will be used to filter
#		   out the files currently being written to, using the timestamp in the name.
#		   File name must be of format YYYYMMDD.HHMM.SS.[rest of filename]
#		   If no input is given, then script defaults to omitting no files.

##############################################################################

# Transfer to NAS flag. If not true, transfer to $SITE_LINUX computer instead
readonly TRANSFER_TO_NAS=true

##############################################################################

# Specify error behaviour
set -o errexit   # abort on nonzero exitstatus
set -o nounset   # abort on unbound variable
set -o pipefail  # don't hide errors within pipes

source "${HOME}/test_data_flow/data_flow/library/data_flow_functions.sh" # For SAS testing

##############################################################################

# Borealis directory files are transferring from
# Use jq with -r option source for the data from Borealis config file
readonly SOURCE="$(cat ${BOREALISPATH}/config.ini | jq -r '.data_directory')"
# SOURCE=/home/radar/testing/data_flow_testing/src #TESTING

# Directory the files will be transferred to
if [[ "$TRANSFER_TO_NAS" == true ]]; then
	readonly DEST="/borealis_nfs/testing/inotify_data_flow/daily/"	# For SAS testing
	# DEST=${HOME}/testing/data_flow_testing/data/daily #TESTING
else
	readonly DEST="/data/borealis_data/daily"			# Site Linux
fi

# Location of inotify watch directory for flags on site linux
readonly FLAG_DEST="/home/transfer/test_data_flow/data_flow/.inotify_watchdir" # For SAS testing
# FLAG_DEST=/home/radar/data_flow/.inotify_watchdir #TESTING

# Flag to send to start next script
readonly FLAG_OUT="${HOME}/test_data_flow/data_flow/.inotify_flags/.rsync_to_nas_flag" # For SAS testing

# Create log file. New file created daily
readonly LOGGING_DIR="${HOME}/logs/rsync_to_nas/$(date +%Y)/$(date +%m)"
mkdir --parents $LOGGING_DIR
readonly LOGFILE="${LOGGING_DIR}/$(date +%Y%m%d).rsync_to_nas.log"
readonly SUMMARY_DIR="${HOME}/logs/rsync_to_nas/summary/$(date +%Y)/$(date +%m)"
mkdir --parents $SUMMARY_DIR
readonly SUMMARY_FILE="${SUMMARY_DIR}/$(date -u +%Y%m%d).rsync_to_nas_summary.log"

##############################################################################

# Redirect all stdout and sterr in this script to $LOGFILE
# exec &>> $LOGFILE

printf "################################################################################\n\n" | tee --append $SUMMARY_FILE

# Date in UTC format for logging
printf "Executing $(basename "$0") on $(hostname)\n" | tee --append $SUMMARY_FILE
date --utc "+%Y%m%d %H:%M:%S UTC" | tee --append $SUMMARY_FILE

# Ensure that only a single instance of this script runs.
if pidof -o %PPID -x -- "$(basename -- $0)" > /dev/null; then
	printf "Error: Script $0 is already running. Exiting...\n"
	exit 1
fi

# Get all files that aren't currently being written do. First, find all .site files 
# in source directory. Then, filter out all files that have same timestamp in the 
# filename as the file that triggered the script via inotify. This will effectively 
# prevent the script from transferring files currently being written by Borealis

if [[ "$TRANSFER_TO_NAS" == true ]]; then
	search=(\( -name "*rawacf.hdf5.*" -o -name "*bfiq.hdf5.*" -o -name "*antennas_iq.hdf5.*" \))
else
	search=(\( -name "*rawacf.hdf5.*" \)) # If transferring to site computer, only send rawacf
fi

# Using the filename that this script triggered on, a pattern can be determined
# to omit the current .site file being written in Borealis. omit_pattern trims the input 
# filename, for example "20221018.1200.00.sas.1.rawacf.hdf5.site", down to "20221018.1200.00." 
if [[ $# -eq 0 ]]; then
	files=$(find ${SOURCE} "${search[@]}") # If no parameter given, default to omitting nothing
else
	omit_pattern="$(echo $1 | cut --fields 1-3 --delimiter ".")"
	files=$(find ${SOURCE} "${search[@]}" | grep --invert-match --fixed-strings $omit_pattern)
fi

if [[ -n $files ]]; then
	printf "Placing following files in ${DEST}:\n"
	printf '%s\n' "${files[@]}"
else
	printf "No files to be transferred.\n"
fi

# Transfer files
for file in $files
do
	if [[ "$TRANSFER_TO_NAS" == true ]]; then
		# rsync file to NAS
		rsync -av --append-verify --timeout=180 --rsh=ssh $file $DEST

		# check if transfer was okay using the md5sum program, then remove the file if it matches
		verify_transfer $file "${DEST}/$(basename $file)"
		return_value=$?
	else
		# rsync file to site computer
		rsync -av --append-verify --timeout=180 --rsh=ssh $file $SITE_LINUX:$DEST

		verify_transfer $file "${DEST}/$(basename $file)" $SITE_LINUX
		return_value=$?
	fi

	if [[ $return_value -eq 0 ]]; then
		echo "Successfully transferred: ${file}" | tee --append $SUMMARY_FILE
		echo "Deleting file..."
		# rm --verbose $file # For SAS testing
	else
		# If file not transferred successfully, don't delete and try again next time
		echo "Transfer failed: ${file}" | tee --append $SUMMARY_FILE
		echo "File not deleted."
	fi
done

# Send "flag" file to notify data flow computer to start next script
printf "\nTriggering next script via inotify...\n"
touch $FLAG_OUT
rsync -av --rsh=ssh "${FLAG_OUT}" "${SITE_LINUX}:${FLAG_DEST}"
# rsync -av --rsh=ssh "${FLAG_OUT}" "${FLAG_DEST}" #TESTING

printf "\nFinished transferring. End time: $(date --utc "+%Y%m%d %H:%M:%S UTC")\n\n\n" | tee --append $SUMMARY_FILE

exit
