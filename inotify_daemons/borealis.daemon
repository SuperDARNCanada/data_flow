#!/bin/bash
# Copyright 2022 SuperDARN Canada, University of Saskatchewan
# Author: Theodore Kolkman
#
# Inotify script to be run on Borealis computer. Executes rsync_to_nas
#
# Dependencies:
#	- inotifywait (installed by zypper in inotify-tools)
#
# Triggers rsync_to_nas when 2-hour set of Borealis files finish writing
#
# inotify watches the directory borealis writes to, and triggers the rsync_to_nas script only when 
# a 2-hour site file is created. Since these files are only created once, and once they're created 
# the previous 2-hour block is finished writing, the rsync_to_nas script will execute immediately 
# after Borealis finishes writing the 2-hour file

###################################################################################################

source "${HOME}/.profile"	# Get SITE_LINUX

readonly WATCH_DIR="/data/borealis_data" # For SAS testing

script_name=$(echo $(basename $0) | cut --fields 1 --delimiter '.')
readonly LOG_DIR="${HOME}/logs/inotify_daemons"
mkdir -p $LOG_DIR
readonly LOGFILE="${LOG_DIR}/${script_name}.log"

readonly FILTER_TIME=15  # Minumum time between script executions

# Location of inotify watch directory for flags on site linux. Should match up with site-linux
# inotify's WATCH_DIR
readonly REMOTE_FLAG_DEST="/home/transfer/test_data_flow/data_flow/.inotify_watchdir" # For SAS testing

# Flag to send to start next script
readonly FLAG_SRC="${HOME}/test_data_flow/data_flow/.inotify_flags" # For SAS testing
mkdir -p $FLAG_SRC
readonly FLAG_OUT="${FLAG_SRC}/.borealis_flag" 

###################################################################################################

exec &>> $LOGFILE # Redirect STDOUT and STDERR to $LOGFILE
echo "Starting $(basename $0) at $(date --utc "+%Y%m%d %H:%M:%S UTC")"

# Inotify is triggered multiple times as multiple 2-hour site files are created. We only want to 
# have our script execute once when these files are created. When inotify triggers multiple times, 
# each instance is put in a queue by `read`, so after the first time the script executes, it will 
# execute again multiple times in quick succession. To filter out these extra script calls, the time
# (in seconds since the epoch) when the script executes the first time is recorded. Then, before 
# executing the script, the current time is compared to the last time it executed. This filters out 
# all the extra inotifywait triggers.
endtime=0

inotifywait --recursive --monitor --syslog --timefmt '%Y%m%d.%H:%M:%S' --format '%T %w %e %f' --event create $WATCH_DIR | \
while read TIME DIRECTORY ACTION FILE # These must line up with format parameters
do
    if [[ "$FILE" =~ .*\.site$ ]]   # Only interested in 2 hour .site files
    then
        # If script just executed, then don't execute again
        cur_time=$(date "+%s")

        # This if statement will only trigger once the previous 2-hour file is finished writing
        if [[ $(($endtime + $FILTER_TIME)) -lt $cur_time ]]; then
            echo "$(date --utc "+%Y%m%d %H:%M:%S UTC") - Inotify triggered on $(basename $0)"

            # Pass current filename so script knows what to omit
            $HOME/test_data_flow/data_flow/borealis/rsync_to_nas $FILE # For SAS testing

            # Send "flag" file to notify site-linux computer to start next script
            touch $FLAG_OUT
            rsync -av --rsh=ssh "${FLAG_OUT}" "${SITE_LINUX}:${REMOTE_FLAG_DEST}"

            echo "$(date --utc "+%Y%m%d %H:%M:%S UTC") - Inotify finished on $(basename $0)"
            endtime=$(date "+%s")
        fi
    fi
done